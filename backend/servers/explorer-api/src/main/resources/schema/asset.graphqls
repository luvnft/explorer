"Taproot asset"
type Asset {
    "The asset ID that uniquely identifies the asset"
    assetId: ID!
    "The asset ID alias in Royllo (generated or configured)"
    assetIdAlias: ID!
    "The asset creator"
    creator: User!
    "The first outpoint of the transaction that created the asset (txid:vout)"
    genesisPoint: BitcoinTransactionOutput!
    "The hash of the metadata for this genesis asset"
    metaDataHash: String!
    "The name of the asset"
    name: String!
    "The index of the output that carries the unique Taproot commitment in the genesis transaction"
    outputIndex: Int!
    "The version of the Taproot asset"
    version: Int!
    "The type of the asset: normal or a collectible"
    type: AssetType!
    "The total amount of the asset stored in this Taproot UTXO"
    amount: BigInteger!
    "Asset group"
    assetGroup: AssetGroup
}

"Asset type"
enum AssetType {
    "Indicates that an asset is capable of being split/merged, with each of the units being fungible, even across a key asset ID boundary (assuming the key group is the same)"
    NORMAL
    "Indicates that an asset is a collectible, meaning that each of the other items under the same key group are not fully fungible with each other. Collectibles also cannot be split or merged."
    COLLECTIBLE
}

"Taproot asset page - Container used to return search asset results"
type AssetPage {
    "Assets returned for a specific page number"
    content: [Asset]
    "Total number of elements returned for the search"
    totalElements: Int!
    "Total number of pages returned for the search"
    totalPages: Int!
}